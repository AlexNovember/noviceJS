
// Задание 1
// • Используя Symbol.iterator, создайте объект "Музыкальная коллекция", который можно итерировать. Каждая итерация должна возвращать следующий альбом из коллекции.

// • Создайте объект musicCollection, который содержит массив альбомов и имеет свойство-символ Symbol.iterator. Каждый альбом имеет следующую структуру:

// {
// title: "Название альбома",
// artist: "Исполнитель",
// year: "Год выпуска"
// }

// • Реализуйте кастомный итератор для объекта musicCollection. Итератор должен перебирать альбомы по порядку.
// • Используйте цикл for...of для перебора альбомов в музыкальной коллекции и вывода их на консоль в формате: Название альбома - Исполнитель (Год выпуска)

// let musicCollection = {
//     title: 'Альбом1',
//     artist: 'Исполнитель1',
//     year: '2000'
// }


let musicCollection = {
    albums: [
        { title: "Альбом 1", artist: "Исполнитель 1", year: "2000" },
        { title: "Альбом 2", artist: "Исполнитель 2", year: "2005" },
        { title: "Альбом 3", artist: "Исполнитель 3", year: "2010" }
    ],
    [Symbol.iterator]: function () {
        let index = 0;
        return {
            next: () => {
                if (index < this.albums.length) {
                    return { value: this.albums[index++], done: false };
                } else {
                    return { done: true };
                }
            }
        };
    }
};

console.log('Задание 1');

for (const artist of musicCollection) {
    console.log(`Альбом: ${artist.title}, Исполнитель: ${artist.artist}, Год выпуска: ${artist.year}`)
}



// Задание 2
// Вы управляете рестораном, в котором работают разные повара, специализирующиеся на определенных блюдах. Клиенты приходят и делают заказы на разные блюда.

// Необходимо создать систему управления этими заказами, которая позволит:

// • Отслеживать, какой повар готовит какое блюдо.
// • Записывать, какие блюда заказал каждый клиент.

// Используйте коллекции Map для хранения блюд и их поваров, а также для хранения заказов каждого клиента. В качестве ключей для клиентов используйте объекты.

// Повара и их специализации:
// Виктор - специализация: Пицца.
// Ольга - специализация: Суши.
// Дмитрий - специализация: Десерты.

// Блюда и их повара:
// Пицца "Маргарита" - повар: Виктор.
// Пицца "Пепперони" - повар: Виктор.
// Суши "Филадельфия" - повар: Ольга.
// Суши "Калифорния" - повар: Ольга.
// Тирамису - повар: Дмитрий.
// Чизкейк - повар: Дмитрий.

// Заказы:
// Клиент Алексей заказал: Пиццу "Пепперони" и Тирамису.
// Клиент Мария заказала: Суши "Калифорния" и Пиццу "Маргарита".
// Клиент Ирина заказала: Чизкейк.


// Создание Map для отслеживания поваров и их специализации
let chefsSpecialization = new Map();
chefsSpecialization.set('Виктор', 'Пицца');
chefsSpecialization.set('Ольга', 'Суши');
chefsSpecialization.set('Дмитрий', 'Десерты');

// Создание Map для отслеживания блюд и их поваров
let dishesAndChefs = new Map();
dishesAndChefs.set('Пицца "Маргарита"', 'Виктор');
dishesAndChefs.set('Пицца "Пепперони"', 'Виктор');
dishesAndChefs.set('Суши "Филадельфия"', 'Ольга');
dishesAndChefs.set('Суши "Калифорния"', 'Ольга');
dishesAndChefs.set('Тирамису', 'Дмитрий');
dishesAndChefs.set('Чизкейк', 'Дмитрий');

// Создание Map для записи заказов каждого клиента
let orders = new Map();
orders.set({ name: 'Алексей' }, ['Пицца "Пепперони"', 'Тирамису']);
orders.set({ name: 'Мария' }, ['Суши "Калифорния"', 'Пицца "Маргарита"']);
orders.set({ name: 'Ирина' }, ['Чизкейк']);

console.log('Задание 2');

// Вывод информации о заказах
orders.forEach((order, client) => {
    console.log(`${client.name} заказал: ${order.join(' и ')}.`);
});

// Вывод информации о поварах и их специализации
chefsSpecialization.forEach((specialization, chef) => {
    console.log(`${chef} специализируется на: ${specialization}.`);
});

// Вывод информации о блюдах и их поварах
dishesAndChefs.forEach((chef, dish) => {
    console.log(`Блюдо ${dish} готовит повар: ${chef}.`);
});